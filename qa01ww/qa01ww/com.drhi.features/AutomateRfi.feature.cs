// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace qa01ww.Com_Drhi_Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("To automate Request for Information", new string[] {
            "AutomateRfi",
            "Browser_Chrome",
            "Regression"}, Description="I want the DRHI applicant; on completion of an application form in MyRHI and Iden" +
        "tified\r\nby RHITA as having a status of ‘Manual Review’;  presented onscreen in M" +
        "yRHI with the RFI \r\nwhich corresponds to the information they have entered (the " +
        "correct RFI)", SourceFile="com.drhi.features\\AutomateRfi.feature", SourceLine=4)]
    public partial class ToAutomateRequestForInformationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AutomateRfi.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "To automate Request for Information", "I want the DRHI applicant; on completion of an application form in MyRHI and Iden" +
                    "tified\r\nby RHITA as having a status of ‘Manual Review’;  presented onscreen in M" +
                    "yRHI with the RFI \r\nwhich corresponds to the information they have entered (the " +
                    "correct RFI)", ProgrammingLanguage.CSharp, new string[] {
                        "AutomateRfi",
                        "Browser_Chrome",
                        "Regression"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void RfiToBeSentOutOnApplication(string mcsnumber, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rfi to be sent out on application", exampleTags);
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
testRunner.Given("I have completed the first page of the application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
testRunner.And("I am not with an Investor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
testRunner.When(string.Format("I enter {0} for a given technology", mcsnumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.And("I create a deemed application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
testRunner.And("I select The property as England", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
testRunner.And("I click on Start application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
testRunner.And("I complete the second page of the application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
testRunner.And("I click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
testRunner.Then("an Rfi should be sent out automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, A", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_A()
        {
#line 11
this.RfiToBeSentOutOnApplication("A", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, B", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_B()
        {
#line 11
this.RfiToBeSentOutOnApplication("B", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, C", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_C()
        {
#line 11
this.RfiToBeSentOutOnApplication("C", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, G", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_G()
        {
#line 11
this.RfiToBeSentOutOnApplication("G", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, H", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_H()
        {
#line 11
this.RfiToBeSentOutOnApplication("H", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, W", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_W()
        {
#line 11
this.RfiToBeSentOutOnApplication("W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, X", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_X()
        {
#line 11
this.RfiToBeSentOutOnApplication("X", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi to be sent out on application, S", SourceLine=22)]
        public virtual void RfiToBeSentOutOnApplication_S()
        {
#line 11
this.RfiToBeSentOutOnApplication("S", ((string[])(null)));
#line hidden
        }
        
        public virtual void RfiShouldNotBeSentOutForAccreditedApplications(string technology, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rfi should not be sent out for accredited applications", exampleTags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
testRunner.Given(string.Format("I am completing the \"{0}\" application process", technology), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
testRunner.When("I click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
testRunner.Then("application should be Auto-accredited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
testRunner.Then("an Rfi should not be sent out automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rfi should not be sent out for accredited applications, S", SourceLine=38)]
        public virtual void RfiShouldNotBeSentOutForAccreditedApplications_S()
        {
#line 32
this.RfiShouldNotBeSentOutForAccreditedApplications("S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Maureen status to change to \"With Member\"", SourceLine=42)]
        public virtual void MaureenStatusToChangeToWithMember()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Maureen status to change to \"With Member\"", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
testRunner.Given("I have completed the first page of the application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
testRunner.And("I am not with an Investor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
testRunner.When("I enter A for a given technology", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
testRunner.And("I create a deemed application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
testRunner.And("I select The property as England", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
testRunner.And("I click on Start application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
testRunner.And("I complete the second page of the application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
testRunner.And("I click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
testRunner.Then("Maureen status should change to With Member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion

