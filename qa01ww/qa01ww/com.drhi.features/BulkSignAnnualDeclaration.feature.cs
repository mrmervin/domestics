// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace qa01ww.Com_Drhi_Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Bulk sign declarations where annual declarations are due", new string[] {
            "Regression",
            "BulkSignDeclaration",
            "Browser_Chrome",
            "Regression"}, SourceFile="com.drhi.features\\BulkSignAnnualDeclaration.feature", SourceLine=4)]
    public partial class BulkSignDeclarationsWhereAnnualDeclarationsAreDueFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BulkSignAnnualDeclaration.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Bulk sign declarations where annual declarations are due", null, ProgrammingLanguage.CSharp, new string[] {
                        "Regression",
                        "BulkSignDeclaration",
                        "Browser_Chrome",
                        "Regression"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AccreditApplicationsWhereAnnualDeclarationsAreDue(string technology, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accredit applications where Annual declarations are due", exampleTags);
#line 7
    this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given(string.Format("I am completing the \"{0}\" application process", technology), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("application  In-Review message should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.Given("the application  status is accredited", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("the first annual declaration is due", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Accredit applications where Annual declarations are due, A", SourceLine=14)]
        public virtual void AccreditApplicationsWhereAnnualDeclarationsAreDue_A()
        {
#line 7
    this.AccreditApplicationsWhereAnnualDeclarationsAreDue("A", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Accredit applications where Annual declarations are due, C", SourceLine=14)]
        public virtual void AccreditApplicationsWhereAnnualDeclarationsAreDue_C()
        {
#line 7
    this.AccreditApplicationsWhereAnnualDeclarationsAreDue("C", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Accredit applications where Annual declarations are due, G", SourceLine=14)]
        public virtual void AccreditApplicationsWhereAnnualDeclarationsAreDue_G()
        {
#line 7
    this.AccreditApplicationsWhereAnnualDeclarationsAreDue("G", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify interactions are created after Bulk signing declarations", SourceLine=18)]
        public virtual void VerifyInteractionsAreCreatedAfterBulkSigningDeclarations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify interactions are created after Bulk signing declarations", ((string[])(null)));
#line 19
 this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I am on Rhita", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I am logged in as CSA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("I am on Rhita", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("I sign as complaint via bulk sign declaration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("a new Interaction is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion

